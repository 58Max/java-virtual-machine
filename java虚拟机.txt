## 虚拟机中的的对象存放的分区



#### 1.新生代（Young）

> `新生代经历的GC叫做Minor GC` GC算法主要是标记清楚

==分配的内存空间比例 8:1:1​==

   -	分为Eden区和SurvivorS0，SurvivorS1
     - Eden区`（伊甸园区）` 主要是新生对象 因为大部分对象只是使用过一次就不会再次使用
     - SurvivorS0 ，SurvivorS1 当新生对象尽力过一次 `MInor GC`后没有被回收掉的话就会进入这个分区，并且在该区域每次经历过一次`Minor GC`没有被回收掉就会年龄+1，当到达设置的`阈值`时就会进入老年区`（一些开始分配内存空间时需要内存比较大的对象会直接进入老年代）`

SurvivorS0和SurvivorS1之间的复制，当第一次Eden发生gc时那么就将Eden中依旧存在引用的对象放在

### 2.老年代（Old）

> `老年代经历的GC叫做Full GC`

当老年代的区域的内存使用的情况不满足为新的对象分配内存空间时就会发生`Full GC`，说到Full GC

就要提到永久代`（方法区）JDK1.8之前存在,在1.87版本被完全移除`，因为无论两者任何一个触发了`Full GC`时两个都会进行垃圾回收。

老年代的GC主要算法是 `标记-清除算法  不同情况使用不同的回收算法`



## JDK1.8的改变

java的Heap和本地内存

1.7开始着手删除方法区（永久代），把字符串常量池和静态变量转移到java的Heap中

符号引用存放在了native heap和元空间一样在本地内存中

到了1.8之后 永久区`（方法区）`取消了，被替换成了元空间。



### 元空间

元空间（本地内存 ）主要用来存储类的元数据

  JDK1.8版本完全移除了永久区，增加了元空间的概念，并将空间进行可扩容

 之前的方法区是在虚拟机里面，但是1.8的元空间被分配在本地内存中



